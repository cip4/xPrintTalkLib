import groovy.json.JsonSlurper

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'groovy'

// javadoc.jar generation
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    failOnError = true
}

// sources.jar generation
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask(uploadArchives) }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                // optionally artifactId can be defined here
                description project.description
                url 'http://www.cip4.org'

                scm {
                    url 'https://github.com/cip4/xPrintTalkLib.git'
                    connection 'scm:git:https://github.com/cip4/xPrintTalkLib.git'
                    developerConnection 'scm:git:https://github.com/cip4/xPrintTalkLib.git'
                }

                issueManagement {
                    system 'JIRA'
                    url 'https://jira.cip4.org/browse/XPTKLIB'
                }

                licenses {
                    license {
                        name 'CIP4 Software License'
                        url 'https://confluence.cip4.org/display/PUB/CIP4+Software+License'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'r.prosi'
                        name 'Dr. Rainer Prosi'
                        organization 'Heidelberger Druckmaschinen AG'
                        organizationUrl 'http://www.heidelberg.com'
                        email 'rainer.prosi@heidelberg.com'
                    }
                    developer {
                        id 's.meissner'
                        name 'Stefan Meissner'
                        organization 'Cimpress Technology'
                        organizationUrl 'https://www.cimpress.com'
                        email 'stefan.meissner@cimpress.com'
                    }
                    developer {
                        id 'm.hartmann'
                        name 'Michel Hartmann'
                        organization 'flyeralarm GmbH'
                        organizationUrl 'https://www.flyeralarm.com'
                        email 'michel.hartmann@flyeralarm.com'
                    }
                    developer {
                        id 'j.hammett'
                        name 'Jeffrey Hammett'
                        organization 'flyeralarm GmbH'
                        organizationUrl 'https://www.flyeralarm.com'
                        email 'jeffrey.hammett@flyeralarm.com'
                    }
                }
            }
        }
    }
}

task createRelease (dependsOn: [test, javadoc]) {
    description = 'Tags the current head with the project\'s version.'

    outputs.file('version.properties')
    String gitCommand = 'git'
    doLast {
        if (!project.hasProperty('projectVersion')) {
            throw new RuntimeException('Version has to be supplied using -PprojectVersion=');
        }
        String gitTag = "release-${version}"
        file('version.properties').text = project.projectVersion
        exec { commandLine gitCommand, 'add', 'version.properties' }
        exec { commandLine gitCommand, 'commit', '-m', "'Prepare for release of ${version}'" }
        exec { commandLine gitCommand, 'tag', '-m', "Release of ${version}",  gitTag }
        exec { commandLine gitCommand, 'push', 'origin', gitTag }
    }
}

String readNextDevVersion(String jiraProject, String releaseVersion) {
    logger.info("Find next developer-version for project ${project} after version ${releaseVersion}")

    URL versionsUrl = new URL("https://jira.cip4.org/rest/api/2/project/${jiraProject}/versions")
    List versions = new JsonSlurper().parseText(versionsUrl.text) as List

    def releaseVersionIndex = findVersionIndex(versions, releaseVersion)
    def nextReleaseVersion = findNextUnreleased(versions, releaseVersionIndex)
    return "${nextReleaseVersion.name}-SNAPSHOT"
}

int findVersionIndex(List versions, String version) {
    for (int i = 0; i < versions.size; ++i) {
        if (versions.get(i).name == version) {
            return i;
        }
    }
    throw new InvalidUserDataException("Version ${version} is not configured in Jira.")
}

def findNextUnreleased(List versions, int after) {
    for (int i = after+1; i < versions.size; i++) {
        if (!versions.get(i).released) {
            return versions.get(i)
        }
    }
    throw new InvalidUserDataException("No unreleased version greater than ${versions.get(after).name} is not configured in Jira.")
}

task updateVersion {
    inputs.file('version.properties')
    outputs.file('version.properties')
    String gitCommand = 'git'
    doLast {
        String nextVersion;
        if (project.hasProperty('projectVersion')) {
            nextVersion = project.projectVersion
            logger.info("Next version was provided by command line (-PprojectVersion=${nextVersion}).")
        } else {
            String currentVersion = file('version.properties').text
            nextVersion = readNextDevVersion('XPTKLIB', currentVersion.replaceFirst('-SNAPSHOT$', ''))
            logger.info("Next version '${nextVersion}' was derived from current version and jira releases.")
        }
        file('version.properties').text = nextVersion
        exec { commandLine gitCommand, 'add', 'version.properties' }
        exec { commandLine gitCommand, 'commit', '-m', "'Incremented version number to ${nextVersion}'" }
        exec { commandLine gitCommand, 'push', 'origin' }
    }
}

nexusStaging {
    packageGroup = "org.cip4"
    stagingProfileId = "105e2b532689c6"
}