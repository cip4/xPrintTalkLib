plugins {
    id 'io.codearte.nexus-staging' version '0.11.0'
    id 'java'
    id 'maven'
    id 'idea'
    id 'jacoco'
}

apply from: 'gradle/deploy.gradle'

group = 'org.cip4.lib.xprinttalk'
version = project.hasProperty('projectVersion') ? project.projectVersion : file('version.properties').text.trim()
description = """CIP4 xPrintTalkLib"""

sourceCompatibility = 1.7
targetCompatibility = sourceCompatibility

wrapper {
    gradleVersion = '4.10.1'
}

def generatedFiles = file("src/generated")
def generatedSources = file("${generatedFiles}/java")
def generatedResources = file("${generatedFiles}/resources")

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    xjc
}
repositories {
    mavenLocal()
    mavenCentral()
}
dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.7'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.2.7'
    compile group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-runtime', version: '0.12.0'
    compile group: 'org.jetbrains', name: 'annotations', version: '13.0'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.7'
    compile group: 'org.cip4.lib.xjdf', name: 'xJdfLib', version: '0.15.1'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.10.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'

    xjc 'com.sun.xml.bind:jaxb-core:2.2.11'
    xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.11'
    xjc group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.11'
    xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.12.0'
    xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.12.0'
    xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-fluent-api', version: '3.0'
}

task createBuildInfoFile() {
    def buildInfoFile = new File("$buildDir/resources/main/org/cip4/lib/xprinttalk/build.properties")
    outputs.file(buildInfoFile)
    doLast {
        def date = new Date()
        Properties props = new Properties()
        props.setProperty('version', project.version.toString())
        props.setProperty('build.date', date.format('yyyy-MM-dd HH:mm:ss'))
        props.store(buildInfoFile.newWriter(), null)
    }
}
processResources.finalizedBy(createBuildInfoFile)

task exractXjdfSchema(type: Copy) {
    from({ zipTree(project.configurations.compile.find { it.name.startsWith("xJdfLib") }) }) {
        include 'JDF20.xsd'
    }
    into "src/main/resources"
}

task xjc() {
    dependsOn(exractXjdfSchema)
    def schema = file('src/main/resources/PrintTalk20.xsd')
    def bindings = file('src/main/resources/binding.xjb')

    inputs.files(schema, bindings)
    outputs.dir(generatedSources)
    outputs.dir(generatedResources)
    doLast {
        generatedSources.mkdirs()
        file("$generatedResources/META-INF").mkdirs()
        Locale defaultLocale = Locale.getDefault();
        Locale.setDefault(Locale.US)
        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)
        ant.xjc(
                destdir: generatedSources,
                binding: bindings,
                schema: 'src/main/resources/PrintTalk20.xsd',
                readonly: true,
                header: false,
                removeOldOutput: true,
                extension: true,
        ) {
            arg(line:
                    project.configurations.compile.find { it.name.startsWith("xJdfLib") }.path
                    + " -mark-generated -Xfluent-api -Xequals -XhashCode -Xinject-code"
                    + " -episode $generatedResources/META-INF/sun-jaxb.episode"
            )
        }
        // Delete duplicated ObjectFactory
        delete "$generatedSources/org/cip4/lib/xjdf"
        Locale.setDefault(defaultLocale)
    }
}

task deleteDuplicatedObjectFactory(type: Delete) {

}

clean.doFirst {
    delete generatedFiles
}

sourceSets {
    main {
        java.srcDir(generatedSources)
        output.dir(generatedResources, builtBy: 'xjc')
    }
}

compileJava {
    dependsOn(xjc)
    dependsOn(deleteDuplicatedObjectFactory)
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

jar {
    manifest {
        attributes(
            "Implementation-Title": project.description,
            "Implementation-Version": project.version,
            "Implementation-Vendor-Id": project.group,
            "Specification-Title": project.description,
            "Specification-Version": project.version,
            "Build-Jdk": JavaVersion.current(),
        )
    }
}

idea {
    module {
        generatedSourceDirs += file(generatedSources)
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = targetCompatibility
    }
}

task zipTestPackage(type: Zip) {
    from 'src/test/resources/org/cip4/lib/xprinttalk/testPackage'
    include '*'
    include '*/*'
    archiveName 'testPackage.zip'
    destinationDir(file("$buildDir/resources/test/org/cip4/lib/xprinttalk"))
}
processTestResources.dependsOn(zipTestPackage)