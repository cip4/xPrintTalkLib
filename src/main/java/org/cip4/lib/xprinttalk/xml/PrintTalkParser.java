package org.cip4.lib.xprinttalk.xml;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.xml.bind.JAXBException;
import javax.xml.bind.ValidationException;

import org.cip4.lib.xjdf.xml.XJdfConstants;
import org.cip4.lib.xjdf.xml.internal.AbstractXmlParser;
import org.cip4.lib.xjdf.xml.internal.AbstractXmlValidator;
import org.cip4.lib.xprinttalk.schema.PrintTalk;
import org.cip4.lib.xprinttalk.xml.internal.JAXBContextFactory;
import org.cip4.lib.xprinttalk.xml.internal.PrintTalkNamespaceMapper;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;

/**
 * Parsing logic for building a XML Document from PrintTalk DOM-Tree and the way around.
 *
 * @author s.meissner
 */
public class PrintTalkParser extends AbstractXmlParser<PrintTalk> {

    /**
     * Private default constructor.
     *
     * @throws JAXBException Thrown in case a JAXBException occurs.
     */
    public PrintTalkParser() throws JAXBException {
        super(JAXBContextFactory.getInstance());
    }

    /**
     * Factory method for getting a new XJdfParser instance.
     *
     * @return New XJdfParser instance.
     */
    public static PrintTalkParser newInstance() {
        try {
            return new PrintTalkParser();
        } catch (JAXBException e) {
            e.printStackTrace();
            throw new AssertionError(e);
        }
    }

    /**
     * Parse a PrintTalk Object Tree to a binary output stream.
     *
     * @param printTalk PrintTalk Object Tree for parsing.
     * @param os Target OutputStream where PrintTalk Document is being parsed.
     *
     * @throws ValidationException Is thrown in case PrintTalk is not valid and validation process is not being
     * skipped.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final void parsePrintTalk(final PrintTalk printTalk, final OutputStream os)
        throws Exception, ValidationException {
        parseXml(printTalk, os);
    }

    /**
     * Parse a PrintTalk Object Tree to a binary output stream.
     *
     * @param printTalk PrintTalk Object Tree for parsing.
     * @param os Target OutputStream where PrintTalk Document is being parsed.
     * @param skipValidation Indicates whether or not validation has to be skipped.
     *
     * @throws ValidationException Is thrown in case PrintTalk is not valid and validation process is not being
     * skipped.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final void parsePrintTalk(final PrintTalk printTalk, final OutputStream os, final boolean skipValidation)
        throws Exception, ValidationException {
        parseXml(printTalk, os, skipValidation);
    }

    /**
     * Parse a PrintTalk Object Tree to a byte array.
     *
     * @param printTalk PrintTalk Object Tree for parsing.
     *
     * @return PrintTalk as byte array.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final byte[] parsePrintTalk(final PrintTalk printTalk) throws Exception {
        return parseXml(printTalk);
    }

    /**
     * Parse a PrintTalk Object Tree to a byte array.
     *
     * @param printTalk PrintTalk Object Tree for parsing.
     * @param skipValidation Skip validation.
     *
     * @return PrintTalk as byte array.
     * @throws Exception Is thrown in case an exception occurs.
     */
    public final byte[] parsePrintTalk(final PrintTalk printTalk, final boolean skipValidation) throws Exception {
        return parseXml(printTalk, skipValidation);
    }

    /**
     * Returns a new specific NamespacePrefixMapper implementation.
     *
     * @return New specific NamespacePrefixMapper implementation.
     */
    @Override
    protected final NamespacePrefixMapper getNamespacePrefixMapper() {
        return new PrintTalkNamespaceMapper();
    }

    /**
     * Returns the XML Header for marshaling.
     *
     * @return XML Header as String
     */
    @Override
    protected final String getXmlHeader() {
        String header = "<!-- Generated by CIP4 xPrintTalkLib " + PrintTalkConstants.PTK_LIB_VERSION
            + " and CIP4 xJdfLib " + XJdfConstants.XJDF_LIB_VERSION + " -->\r\n";
        header = header.replaceAll("  ", " ");
        return header;
    }

    @Override
    protected final AbstractXmlValidator<PrintTalk> createValidator(final InputStream is) throws IOException {
        return new PrintTalkValidator(is);
    }

}
